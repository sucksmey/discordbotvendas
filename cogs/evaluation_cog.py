# cogs/evaluation_cog.py
import discord
from discord.ext import commands
from discord.ui import View, Modal, InputText, button

import config

# --- Formul√°rio Modal (O que abre ao clicar no bot√£o) ---
class ReviewModal(Modal):
    def __init__(self, bot) -> None:
        super().__init__(title="Avalie nosso Atendimento")
        self.bot = bot
        self.add_item(InputText(label="Nota de 0 a 10", placeholder="Ex: 10", min_length=1, max_length=2))
        self.add_item(InputText(label="Deixe seu coment√°rio", style=discord.InputTextStyle.long, placeholder="Gostei muito do atendimento...", required=False))

    async def callback(self, interaction: discord.Interaction):
        nota = self.children[0].value
        comentario = self.children[1].value or "Nenhum coment√°rio."
        user = interaction.user

        review_channel = self.bot.get_channel(config.REVIEW_CHANNEL_ID)
        if not review_channel:
            return await interaction.response.send_message("Canal de avalia√ß√µes n√£o configurado.", ephemeral=True)

        embed = discord.Embed(
            title="üåü Nova Avalia√ß√£o de Cliente!",
            description=f"**Coment√°rio:**\n*'{comentario}'*",
            color=config.EMBED_COLOR
        )
        embed.set_author(name=f"Avalia√ß√£o de {user.display_name}", icon_url=user.display_avatar.url)
        embed.add_field(name="Nota", value=f"**{nota}/10**", inline=True)
        embed.set_thumbnail(url=user.display_avatar.url)
        
        # Adiciona o nome do atendente se poss√≠vel (exemplo, pode ser adaptado)
        # embed.add_field(name="Atendido por", value="Nome do Atendente", inline=True)
        
        await review_channel.send(embed=embed)
        await interaction.response.send_message("Obrigado pela sua avalia√ß√£o!", ephemeral=True)


# --- View com o Bot√£o de Avalia√ß√£o ---
class ReviewButtonView(View):
    def __init__(self, bot):
        super().__init__(timeout=None) # Bot√£o persistente
        self.bot = bot

    @button(label="Avaliar Atendimento", style=discord.ButtonStyle.success, custom_id="review_button", emoji="‚≠ê")
    async def review_button_callback(self, button_obj: discord.ui.Button, interaction: discord.Interaction):
        # Abre o formul√°rio (Modal) quando o bot√£o √© clicado
        modal = ReviewModal(bot=self.bot)
        await interaction.response.send_modal(modal)


# --- Cog de Avalia√ß√£o ---
class EvaluationCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.Cog.listener()
    async def on_ready(self):
        # Registra a view com o bot√£o para que ele funcione ap√≥s rein√≠cios do bot
        self.bot.add_view(ReviewButtonView(bot=self.bot))
        print("View de avalia√ß√£o registrada.")

    @commands.slash_command(
        name="avaliacao",
        description="Envia um painel para o cliente avaliar o atendimento.",
        guild_ids=[config.GUILD_ID]
    )
    @commands.has_any_role(*config.ATTENDANT_ROLE_IDS) # Apenas admins podem usar este comando
    async def post_review_panel(self, ctx: discord.ApplicationContext):
        """
        Este comando agora posta a mensagem com o bot√£o de avalia√ß√£o no canal onde for usado.
        """
        embed = discord.Embed(
            title="‚≠ê Avalie sua Experi√™ncia!",
            description="Ficamos felizes em te atender! Por favor, clique no bot√£o abaixo para deixar sua avalia√ß√£o sobre a sua √∫ltima compra. Seu feedback √© muito importante para n√≥s!",
            color=config.EMBED_COLOR
        )
        embed.set_footer(text="Agradecemos a sua prefer√™ncia!")
        
        # Envia a mensagem com o bot√£o no canal atual
        await ctx.send(embed=embed, view=ReviewButtonView(bot=self.bot))
        
        # Confirma para o admin que a a√ß√£o foi conclu√≠da
        await ctx.respond("Painel de avalia√ß√£o enviado com sucesso!", ephemeral=True)

def setup(bot):
    bot.add_cog(EvaluationCog(bot))
